Proiect Laborator (timp de lucru 2 saptamani)

Sa se realizeze o aplicatie in Visual Studio pentru
anunturi vanzari/inchirieri auto.

Informatii despre un anunt (implementat printr-o clasa)

- Id (unic) int
- Tip (vanzare/inchiriere) enum
- Marca string
- Model string
- Pret double
- AnFabricatie int
- Combustibil string
- Descriere string
- Lista de poze List<string> (memoreaza caile pe disk ale pozelor)





public int Id { get; set; }

        public int type { get; set; }
        public string Brand { get; set; }
        public string Model { get; set; }
        public double Price { get; set; }
        public int Year { get; set; }
        public string FuelType { get; set; }
        public string Description { get; set; }







Toate anunturile vor fi memorate intr-o alta clasa care implementeze o lista de 
anunturi cu urmatoarele facilitati:

- adaugare, eliminare anunt
- cautare anunturi dupa diverse criterii:
	a) interval de pret (minim, maxim)
	b) interval de an fabricatie (minim, maxim)
	c) model
	d) tip anunt (inchiriere/vanzare)
- ordonare anunturi diverse criterii:
	a) pret (crescator)
	b) an fabricatie
- salvarea datelor pe disk (format json)
- incarcarea datelor de pe disk

Date/Pozele vor fi salvate pe disk in felul urmator:

In app.config va exista o cheie catre folderul ce contine datele si pozele

"FilePath"

In continuare, se va crea cate un folder pentru fiecare anunt (cu numele dat de id-ul unic
al anuntului; daca anuntul are id-ul 5, folderul se va numi "5").

In folderul anuntului vor fi salvate datele (un singur fisier "data.json") si pozele 
(mai multe fisiere cu nume unice, eventual generate folosind clasa Guid).

Solutia va contine doua proiecte (eventual si al treilea de tip consola doar pentru teste
preliminare)

1) "AutoAdModel" - proiect de tip library care contine clasele si implementarile acestora

class AutoAd
{

}

class AutoAdList
{

}

public enum AdType
{
	Rent = 1
	Sell = 2
}

2) "AutoAdUI" - proiect de tip Windows Forms pentru interfata grafica cu utilizatorul

(face referire la primul)

Aici introduce elemente de interfata grafica (la alegere) pentru implementarea cerintelor initiale 
ale proiectului.

-adaugare, stergere
-vizualizarea unei liste de anunturi
-cautare
-ordonare
-salvare
-vizualizare informatii despre un singur anunt (cu poze).

   public class AutoAd
   {
        public int Id { get; set; }
        public int Type { get; set; }
        public double Price { get; set; }
        public int Year { get; set; }
	public DateTime Date {get;set;}
   }

 public enum AdType
    {
        Sell = 1,
        Rent = 2
    }

 class Program
    {
        static void Main(string[] args)
        {
            List<AutoAd> ads = new List<AutoAd>()
            {
                new AutoAd()
                {
                    Id = 1,
                    Price = 23.5,
                    Type = (int)AdType.Rent,
                    Year = 2005
                },
                  new AutoAd()
                {
                    Id = 2,
                    Price = 83.5,
                    Type = (int)AdType.Rent,
                    Year = 2007
                },
                    new AutoAd()
                {
                    Id = 3,
                    Price = 105.5,
                    Type = (int)AdType.Sell,
                    Year = 2010
                },
                      new AutoAd()
                {
                    Id = 4,
                    Price = 203.5,
                    Type = (int)AdType.Sell,
                    Year = 2015
                },
                        new AutoAd()
                {
                    Id = 5,
                    Price = 2003.5,
                    Type = (int)AdType.Sell,
                    Year = 2020
                }
            };

            //(1) filtrarea anunturilor intr-un interval de pret (min, max)
            double min = 50;
            double max = 500;

            var result = ads.Where(x => x.Price >= min && x.Price <= max).ToList();

            //(2) ordonare dupa diverse campuri

            var result1 = ads.OrderBy(x => x.Price).ToList();
        }
    }







 

